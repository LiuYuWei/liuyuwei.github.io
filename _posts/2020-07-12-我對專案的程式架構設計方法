---
layout: post
title:  "我對專案的程式架構設計方法"
date:   2020-07-12 14:25
categories: Mind
permalink: /archivers/my-code-structure
---

今天來談談程式的架構。

設計一個程式架構，就很像是在做家中裝潢設計一樣，要先將所有需求攤開來看，然後看看要怎麼把需求轉換成設計圖，而這個設計圖就很像是程式架構，設計圖一定會希望在滿足需求之虞，再細部調整與維護時候，可以更快的回應使用者需求。

那在回到程式碼來看:

1. 可讀性高：不熟悉專案程式碼的人，一眼就能看懂目錄結構，知道程式啟動指令碼是哪個，測試目錄在哪兒，配置檔案在哪兒等等。從而非常快速的瞭解這個專案。
2. 可維護性高：定義好組織規則後，維護者就能很明確地知道，新增的哪個檔案和程式碼應該放在什麼目錄之下。這個好處是，隨著時間的推移，程式碼/配置的規模增加，專案結構不會混亂，仍然能夠組織良好。

所以，目錄結構定義是有必要的，
而我自己目前使用的程式碼架構就是:

main.py -> src/__init__.py(如果專案夠大，或是使用flask架構) -> src/app -> src/service -> service子資料夾 -> src/dao -> database

分層式架構幫助在閱讀程式碼和維護程式碼肯定會有些幫助，當系統需要改善時也知道要從哪邊開始做起，

而在python程式架構的維護上，有些檔案和好工具可以多做使用:

1. setup.py: 一定要使用setuptools套件來幫助管理和安裝部署工具，提高效率、減少出錯的概率。
2. requirements.txt: 方便開發者維護軟體的package.
3. README.md: 把專案如何部屬寫在裡面也很重要。

如果想看看我目前設計的程式碼架構，可以到這個開源專案，相信可以了解程式架構的重要性的，也歡迎對我的程式架構與想法提出一些見解，讓我能夠更進步:

https://github.com/LiuYuWei/kaggle-house-prices

#一點點小心得
